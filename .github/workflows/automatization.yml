name: Automation

on:
  pull_request:
    types: [opened]
  issues:
    types: [closed]

jobs:
  update-project:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate GitHub CLI with PAT
        run: echo "${{ secrets.GH_PAT }}" | gh auth login --with-token

      - name: Add PR to project and move to Review #when pull request opened
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        run: |
          # Get Project v2 ID
          PROJECT_ID=$(gh api graphql -f query='
            query {
              user(login: "NoxAstrica") {
                projectV2(number: 1) {
                  id
                }
              }
            }' --jq '.data.user.projectV2.id')

          # Get Status field ID (single-select)
          STATUS_FIELD_ID=$(gh api graphql -f query='
            query($projectId:ID!) {
              node(id:$projectId) {
                ... on ProjectV2 {
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }' -F projectId="$PROJECT_ID" --jq '.data.node.fields.nodes[] | select(.name=="Status") | .id')

          # Add the PR to the project and set Status = "Review"
          gh api graphql -f query='
            mutation($projectId:ID!, $contentID:ID!, $statusFieldID:ID!) {
              addProjectV2Item(input:{projectId:$projectId, contentId:$contentID}) {
                item {
                  id
                }
              }
              updateProjectV2ItemField(input:{projectId:$projectId, itemId:$contentID, fieldId:$statusFieldID, value:{name:"Review"}}) {
                projectV2Item {
                  id
                }
              }
            }' \
            -F projectId="$PROJECT_ID" \
            -F contentID="${{ github.event.pull_request.node_id }}" \
            -F statusFieldID="$STATUS_FIELD_ID"

      - name: Move Issue to Done # when issue closed
        if: github.event_name == 'issues' && github.event.action == 'closed'
        run: |
          # Get Project v2 ID
          PROJECT_ID=$(gh api graphql -f query='
            query {
              user(login: "NoxAstrica") {
                projectV2(number: 1) {
                  id
                }
              }
            }' --jq '.data.user.projectV2.id')

          # Get Status field ID
          STATUS_FIELD_ID=$(gh api graphql -f query='
            query($projectId:ID!) {
              node(id:$projectId) {
                ... on ProjectV2 {
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }' -F projectId="$PROJECT_ID" --jq '.data.node.fields.nodes[] | select(.name=="Status") | .id')

          # Add the issue to the project and set Status = "Done"
          gh api graphql -f query='
            mutation($projectId:ID!, $contentID:ID!, $statusFieldID:ID!) {
              addProjectV2Item(input:{projectId:$projectId, contentId:$contentID}) {
                item {
                  id
                }
              }
              updateProjectV2ItemField(input:{projectId:$projectId, itemId:$contentID, fieldId:$statusFieldID, value:{name:"Done"}}) {
                projectV2Item {
                  id
                }
              }
            }' \
            -F projectId="$PROJECT_ID" \
            -F contentID="${{ github.event.issue.node_id }}" \
            -F statusFieldID="$STATUS_FIELD_ID"
